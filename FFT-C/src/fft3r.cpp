//#include "fft3.c" 
#include <stdio.h>   
#include <stdlib.h>   
#include <math.h>  
#include "Header.h"

extern void fft31(double A[2][N1], int ifft);
extern void fft32(double A[2][N2], int ifft);
extern void fft33(double A[2][N3], int ifft);

void fft3r(double A[2][N1][N2][N3], int ifft);
void rowcolumn(double A[2][N1][N2], int ifft);
void fft2r2(double C1[2][N1][N2], double C2[2][N1][N2], int ifft);
void fft3r23(double A[2][N3], double B[2][N3], int ifft);
/**** fft3r(),fft3r->fft2r()(N1+N2)+fft1()(N3), ifft= 1 or -1 ***/
void fft3r(double A[2][N1][N2][N3], int ifft)
{
	unsigned int i, j, k;
	double C1[2][N1][N2], C2[2][N1][N2], D1[2][N3], D2[2][N3];
	if (ifft == 1)
	{
		for (k = 0; k<N3; k += 2)
		{
			for (i = 0; i<N1; i++)
				for (j = 0; j<N2; j++)
				{
				C1[0][i][j] = A[0][i][j][k];   C1[1][i][j] = 0.0;
				C2[0][i][j] = A[0][i][j][k + 1]; C2[1][i][j] = 0.0;
				}
			fft2r2(C1, C2, 1);
			for (i = 0; i<N1; i++)
				for (j = 0; j<N2; j++)
				{
				A[0][i][j][k] = C1[0][i][j];
				A[1][i][j][k] = C1[1][i][j];
				A[0][i][j][k + 1] = C2[0][i][j];
				A[1][i][j][k + 1] = C2[1][i][j];
				}
		}
		for (i = 1; i<N1; i++)            /* for x(j1,j2,j3) */
		{
			for (j = 1; j<N2 / 2; j++)
			{
				for (k = 0; k<N3; k++)
				{
					D1[0][k] = A[0][i][j][k];   D1[1][k] = 0.0;
					D2[0][k] = A[1][i][j][k];   D2[1][k] = 0.0;
				}
				fft3r23(D1, D2, 1);
				for (k = 0; k<N3; k++)
				{
					A[0][i][j][k] = D1[0][k] - D2[1][k];
					A[1][i][j][k] = D1[1][k] + D2[0][k];
					A[0][N1 - i][N2 - j][k] = D1[0][k] + D2[1][k];
					A[1][N1 - i][N2 - j][k] = D1[1][k] - D2[0][k];
				}
			}
		} /* end for i */
		for (i = 1; i<N1 / 2; i++)
		{
			for (k = 0; k<N3; k++)              /* for x(j1,0,j3) */
			{
				D1[0][k] = A[0][i][0][k];    D1[1][k] = 0.0;
				D2[0][k] = A[1][i][0][k];    D2[1][k] = 0.0;
			}
			fft3r23(D1, D2, 1);
			for (k = 0; k<N3; k++)
			{
				A[0][i][0][k] = D1[0][k] - D2[1][k];
				A[1][i][0][k] = D1[1][k] + D2[0][k];
				A[0][N1 - i][0][k] = D1[0][k] + D2[1][k];
				A[1][N1 - i][0][k] = D1[1][k] - D2[0][k];
			}
		}
		for (i = 1; i<N1 / 2; i++)
		{
			for (k = 0; k<N3; k++)               /* for x(j1,N2/2,j3) */
			{
				D1[0][k] = A[0][i][N2 / 2][k];    D1[1][k] = 0.0;
				D2[0][k] = A[1][i][N2 / 2][k];    D2[1][k] = 0.0;
			}
			fft3r23(D1, D2, 1);
			for (k = 0; k<N3; k++)
			{
				A[0][i][N2 / 2][k] = D1[0][k] - D2[1][k];
				A[1][i][N2 / 2][k] = D1[1][k] + D2[0][k];
				A[0][N1 - i][N2 / 2][k] = D1[0][k] + D2[1][k];
				A[1][N1 - i][N2 / 2][k] = D1[1][k] - D2[0][k];
			}
		}
		for (j = 1; j<N2 / 2; j++)
		{
			for (k = 0; k<N3; k++)               /* for x(0,j2,j3) */
			{
				D1[0][k] = A[0][0][j][k];    D1[1][k] = 0.0;
				D2[0][k] = A[1][0][j][k];    D2[1][k] = 0.0;
			}
			fft3r23(D1, D2, ifft);
			for (k = 0; k<N3; k++)
			{
				A[0][0][j][k] = D1[0][k] - D2[1][k];
				A[1][0][j][k] = D1[1][k] + D2[0][k];
				A[0][0][N2 - j][k] = D1[0][k] + D2[1][k];
				A[1][0][N2 - j][k] = D1[1][k] - D2[0][k];
			}
		}
		for (k = 0; k<N3; k++)                  /* for x(0,0,j3) & x(N1/2,0,j3) */
		{
			D1[0][k] = A[0][0][0][k];    D1[1][k] = 0.0;
			D2[0][k] = A[0][N1 / 2][0][k]; D2[1][k] = 0.0;
		}
		fft3r23(D1, D2, 1);
		for (k = 0; k<N3; k++)
		{
			A[0][0][0][k] = D1[0][k];
			A[1][0][0][k] = D1[1][k];
			A[0][N1 / 2][0][k] = D2[0][k];
			A[1][N1 / 2][0][k] = D2[1][k];
		}
		for (k = 0; k<N3; k++)
		{
			D1[0][k] = A[0][0][N2 / 2][k];    D1[1][k] = 0.0;
			D2[0][k] = A[0][N1 / 2][N2 / 2][k]; D2[1][k] = 0.0;
		}
		fft3r23(D1, D2, 1);
		for (k = 0; k<N3; k++)
		{
			A[0][0][N2 / 2][k] = D1[0][k];
			A[1][0][N2 / 2][k] = D1[1][k];
			A[0][N1 / 2][N2 / 2][k] = D2[0][k];
			A[1][N1 / 2][N2 / 2][k] = D2[1][k];
		}
	} /* end if( ifft == 1 ) */
	else
	{
		for (k = 0; k<N3; k++)                  /* for z( 0,0,k3) & z(N1/2,0,k3) */
		{
			D1[0][k] = A[0][0][0][k];
			D1[1][k] = A[1][0][0][k];
			D2[0][k] = A[0][N1 / 2][0][k];
			D2[1][k] = A[1][N1 / 2][0][k];
		}
		fft3r23(D1, D2, -1);
		for (k = 0; k<N3; k++)
		{
			A[0][0][0][k] = D1[0][k];
			A[1][0][0][k] = D1[1][k];
			A[0][N1 / 2][0][k] = D2[0][k];
			A[1][N1 / 2][0][k] = D2[1][k];
		}
		for (k = 0; k<N3; k++)                  /*for z(0,N2/2,k3 )&z(N1/2,N2/2,k3)*/
		{
			D1[0][k] = A[0][0][N2 / 2][k];
			D1[1][k] = A[1][0][N2 / 2][k];
			D2[0][k] = A[0][N1 / 2][N2 / 2][k];
			D2[1][k] = A[1][N1 / 2][N2 / 2][k];
		}
		fft3r23(D1, D2, -1);
		for (k = 0; k<N3; k++)
		{
			A[0][0][N2 / 2][k] = D1[0][k];
			A[1][0][N2 / 2][k] = D1[1][k];
			A[0][N1 / 2][N2 / 2][k] = D2[0][k];
			A[1][N1 / 2][N2 / 2][k] = D2[1][k];
		}
		for (i = 1; i<N1 / 2; i++)
		{
			for (k = 0; k<N3; k++)
			{
				D1[0][k] = 0.5*(A[0][i][0][k] + A[0][N1 - i][0][k]);
				D2[1][k] = 0.5*(-A[0][i][0][k] + A[0][N1 - i][0][k]);
				D1[1][k] = 0.5*(A[1][i][0][k] + A[1][N1 - i][0][k]);
				D2[0][k] = 0.5*(A[1][i][0][k] - A[1][N1 - i][0][k]);
			}
			fft3r23(D1, D2, -1);
			for (k = 0; k<N3; k++)
			{
				A[0][i][0][k] = D1[0][k];
				A[1][i][0][k] = D2[0][k];
				A[0][N1 - i][0][k] = A[0][i][0][k];
				A[1][N1 - i][0][k] = -A[1][i][0][k];
			}
		}
		for (i = 1; i<N1 / 2; i++)
		{
			for (k = 0; k<N3; k++)
			{
				D1[0][k] = 0.5*(A[0][i][N2 / 2][k] + A[0][N1 - i][N2 / 2][k]);
				D2[1][k] = 0.5*(-A[0][i][N2 / 2][k] + A[0][N1 - i][N2 / 2][k]);
				D1[1][k] = 0.5*(A[1][i][N2 / 2][k] + A[1][N1 - i][N2 / 2][k]);
				D2[0][k] = 0.5*(A[1][i][N2 / 2][k] - A[1][N1 - i][N2 / 2][k]);
			}
			fft3r23(D1, D2, -1);
			for (k = 0; k<N3; k++)
			{
				A[0][i][N2 / 2][k] = D1[0][k];
				A[1][i][N2 / 2][k] = D2[0][k];
				A[0][N1 - i][N2 / 2][k] = A[0][i][N2 / 2][k];
				A[1][N1 - i][N2 / 2][k] = -A[1][i][N2 / 2][k];
			}
		}
		for (j = 1; j<N2 / 2; j++)
		{
			for (k = 0; k<N3; k++)
			{
				D1[0][k] = 0.5*(A[0][0][j][k] + A[0][0][N2 - j][k]);
				D2[1][k] = 0.5*(-A[0][0][j][k] + A[0][0][N2 - j][k]);
				D1[1][k] = 0.5*(A[1][0][j][k] + A[1][0][N2 - j][k]);
				D2[0][k] = 0.5*(A[1][0][j][k] - A[1][0][N2 - j][k]);
			}
			fft3r23(D1, D2, -1);
			for (k = 0; k<N3; k++)
			{
				A[0][0][j][k] = D1[0][k];
				A[1][0][j][k] = D2[0][k];
				A[0][0][N2 - j][k] = A[0][0][j][k];
				A[1][0][N2 - j][k] = -A[1][0][j][k];
			}
		}
		for (i = 1; i<N1; i++)
		{
			for (j = 1; j<N2 / 2; j++)
			{
				for (k = 0; k<N3; k++)
				{
					D1[0][k] = 0.5*(A[0][i][j][k] + A[0][N1 - i][N2 - j][k]);
					D2[1][k] = 0.5*(-A[0][i][j][k] + A[0][N1 - i][N2 - j][k]);
					D1[1][k] = 0.5*(A[1][i][j][k] + A[1][N1 - i][N2 - j][k]);
					D2[0][k] = 0.5*(A[1][i][j][k] - A[1][N1 - i][N2 - j][k]);
				}
				fft3r23(D1, D2, -1);
				for (k = 0; k<N3; k++)
				{
					A[0][i][j][k] = D1[0][k];
					A[1][i][j][k] = D2[0][k];
					A[0][N1 - i][N2 - j][k] = A[0][i][j][k];
					A[1][N1 - i][N2 - j][k] = -A[1][i][j][k];
				}
			}
		}
		for (k = 0; k<N3; k += 2)
		{
			for (i = 0; i<N1; i++)
				for (j = 0; j<N2; j++)
				{
				C1[0][i][j] = A[0][i][j][k];
				C1[1][i][j] = A[1][i][j][k];
				C2[0][i][j] = A[0][i][j][k + 1];
				C2[1][i][j] = A[1][i][j][k + 1];
				}
			fft2r2(C1, C2, -1);
			for (i = 0; i<N1; i++)
				for (j = 0; j<N2; j++)
				{
				A[0][i][j][k] = C1[0][i][j];
				A[1][i][j][k] = 0.0;
				A[0][i][j][k + 1] = C2[0][i][j];
				A[1][i][j][k + 1] = 0.0;
				}
		}
	}  /* end else if( ifft==-1 ) */
}
/**** rowcolume algorithm, N2, N1, ifft= 1 or -1  ********************/
void fft2r2(double C1[2][N1][N2], double C2[2][N1][N2], int ifft)
{
	unsigned int i, j;
	double A[2][N1][N2];
	if (ifft == 1)
	{
		for (j = 0; j<N2; j++)
			for (i = 0; i<N1; i++)
			{
			A[0][i][j] = C1[0][i][j]; A[1][i][j] = C2[0][i][j];
			}
	}
	else
	{
		for (j = 1; j <= N2 / 2; j++)
			for (i = 1; i<N1; i++)
			{
			A[0][i][j] = C1[0][i][j] - C2[1][i][j];
			A[0][N1 - i][N2 - j] = C1[0][i][j] + C2[1][i][j];
			A[1][i][j] = C1[1][i][j] + C2[0][i][j];
			A[1][N1 - i][N2 - j] = -C1[1][i][j] + C2[0][i][j];
			}
		for (j = 1; j <= N2 / 2; j++)
		{
			A[0][0][j] = C1[0][0][j] - C2[1][0][j];
			A[0][0][N2 - j] = C1[0][0][j] + C2[1][0][j];
			A[1][0][j] = C1[1][0][j] + C2[0][0][j];
			A[1][0][N2 - j] = -C1[1][0][j] + C2[0][0][j];
		}
		for (i = 1; i<N1; i++)
		{
			A[0][i][0] = C1[0][i][0] - C2[1][i][0];
			A[1][i][0] = C1[1][i][0] + C2[0][i][0];
		}
		A[0][0][0] = C1[0][0][0];
		A[1][0][0] = C2[0][0][0];
	}
	rowcolumn(A, ifft);
	if (ifft == 1)
	{
		for (j = 1; j<N2; j++)
			for (i = 1; i<N1; i++)
			{
			C1[0][i][j] = 0.5*(A[0][i][j] + A[0][N1 - i][N2 - j]);
			C1[1][i][j] = 0.5*(A[1][i][j] - A[1][N1 - i][N2 - j]);
			C2[0][i][j] = 0.5*(A[1][i][j] + A[1][N1 - i][N2 - j]);
			C2[1][i][j] = -0.5*(A[0][i][j] - A[0][N1 - i][N2 - j]);
			}
		for (j = 1; j<N2; j++)
		{
			C1[0][0][j] = 0.5*(A[0][0][j] + A[0][0][N2 - j]);
			C1[1][0][j] = 0.5*(A[1][0][j] - A[1][0][N2 - j]);
			C2[0][0][j] = 0.5*(A[1][0][j] + A[1][0][N2 - j]);
			C2[1][0][j] = -0.5*(A[0][0][j] - A[0][0][N2 - j]);
		}
		for (i = 1; i<N1; i++)
		{
			C1[0][i][0] = 0.5*(A[0][i][0] + A[0][N1 - i][0]);
			C1[1][i][0] = 0.5*(A[1][i][0] - A[1][N1 - i][0]);
			C2[0][i][0] = 0.5*(A[1][i][0] + A[1][N1 - i][0]);
			C2[1][i][0] = -0.5*(A[0][i][0] - A[0][N1 - i][0]);
		}
		C1[0][0][0] = A[0][0][0]; C1[1][0][0] = 0.0;
		C2[0][0][0] = A[1][0][0]; C2[1][0][0] = 0.0;
	}
	else
	{
		for (j = 0; j<N2; j++)
			for (i = 0; i<N1; i++)
			{
			C1[0][i][j] = A[0][i][j]; C2[0][i][j] = A[1][i][j];
			C1[1][i][j] = 0.0;        C2[1][i][j] = 0.0;
			}
	}
}
/**** rowcolume algorithm, N2, N1, ifft= 1 or -1  ********************/
void rowcolumn(double A[2][N1][N2], int ifft)
{
	unsigned int i, j;
	double B1[2][N1], B2[2][N2];
	for (j = 0; j<N2; j++)
	{
		for (i = 0; i<N1; i++) { B1[0][i] = A[0][i][j]; B1[1][i] = A[1][i][j]; }
		fft31(B1, ifft);
		for (i = 0; i<N1; i++) { A[0][i][j] = B1[0][i]; A[1][i][j] = B1[1][i]; }
	}
	for (i = 0; i<N1; i++)
	{
		for (j = 0; j<N2; j++) { B2[0][j] = A[0][i][j]; B2[1][j] = A[1][i][j]; }
		fft32(B2, ifft);
		for (j = 0; j<N2; j++) { A[0][i][j] = B2[0][j]; A[1][i][j] = B2[1][j]; }
	}
}
/******** ifft=1 <--> FFT ********* ifft=-1 <--> IFFT ******************/
void fft3r23(double A[2][N3], double B[2][N3], int ifft)
{
	unsigned long int k, j;
	double c[2][N3];
	if (ifft != -1)
	{
		for (k = 0; k<N3; k++) { c[0][k] = A[0][k]; c[1][k] = B[0][k]; }
		fft33(c, 1);
		A[0][0] = c[0][0];  A[1][0] = 0.0; B[0][0] = c[1][0];   B[1][0] = 0.0;
		for (j = 1; j<N3; j++)
		{
			A[0][j] = 0.5*(c[0][j] + c[0][N3 - j]);
			A[1][j] = 0.5*(c[1][j] - c[1][N3 - j]);
			B[0][j] = 0.5*(c[1][j] + c[1][N3 - j]);
			B[1][j] = -0.5*(c[0][j] - c[0][N3 - j]);
		}
	}
	else
	{
		for (j = 0; j<N3; j++)
		{
			c[0][j] = A[0][j] - B[1][j]; c[1][j] = A[1][j] + B[0][j];
		}
		fft33(c, -1);
		for (k = 0; k<N3; k++)
		{
			A[0][k] = c[0][k]; B[0][k] = c[1][k];
			A[1][k] = 0.0;     B[1][k] = 0.0;
		}
	}
}